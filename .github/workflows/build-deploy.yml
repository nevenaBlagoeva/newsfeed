name: Build & Deploy Lambdas

on:
  push:
    branches: [main]

env:
  ARTIFACT_BUCKET: newsfeed-lambda-artifacts
  AWS_REGION: eu-west-1
  BUILD_DIR: .build
  LAMBDAS: fetcher filter ingest ingest_api retrieve
  REQUIRED_PACKAGES: praw pydantic feedparser

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

      - name: Install Poetry
        run: pip install "poetry==1.5.1"

      - name: Install dependencies & run tests
        run: |
          poetry install -vvv
          PYTHONPATH=src poetry run pytest

      - name: Export requirements from Poetry
        run: poetry export -f requirements.txt --without-hashes -o requirements.txt

      - name: Ensure artifact bucket exists
        run: |
          aws s3api head-bucket --bucket "$ARTIFACT_BUCKET" 2>/dev/null || \
          aws s3 mb "s3://$ARTIFACT_BUCKET"

      - name: Debug Lambdas folder
        run: |
          echo "Listing contents of src/newsfeed/lambdas:"
          ls -R src/newsfeed/lambdas

      - name: Package and upload Lambdas
        run: |
          set -euo pipefail
          for LAMBDA in ${{ env.LAMBDAS }}; do
            echo "======================================"
            echo "üì¶ Packaging Lambda: $LAMBDA"

            ZIP_DIR="${{ env.BUILD_DIR }}/$LAMBDA"
            PKG_DIR="$ZIP_DIR/pkg"
            ZIPFILE="$ZIP_DIR/newsfeed-${LAMBDA}.zip"

            rm -rf "$PKG_DIR" "$ZIP_DIR"
            mkdir -p "$PKG_DIR" "$ZIP_DIR"

            # Install dependencies into package folder
            pip install --upgrade pip
            pip install --target "$PKG_DIR" -r requirements.txt

            # Copy shared code
            cp -r src/newsfeed/* "$PKG_DIR/"

            # Copy Lambda-specific code
            if [ -d "src/newsfeed/lambdas/$LAMBDA" ]; then
              cp -r src/newsfeed/lambdas/$LAMBDA/* "$PKG_DIR/"
            else
              echo "‚ùå Lambda folder src/newsfeed/lambdas/$LAMBDA does not exist"
              exit 1
            fi

            # Create zip
            (cd "$PKG_DIR" && zip -r "../newsfeed-${LAMBDA}.zip" . -x '__pycache__/*' '*.pyc')

            # Verify required packages
            MISSING=0
            for pkg in ${{ env.REQUIRED_PACKAGES }}; do
              if [ ! -d "$PKG_DIR/$pkg" ]; then
                echo "‚ùå Missing $pkg in Lambda: $LAMBDA"
                MISSING=1
              fi
            done
            if [ $MISSING -ne 0 ]; then exit 1; fi

            # Upload to S3
            echo "‚òÅÔ∏è Uploading $ZIPFILE to S3..."
            aws s3 cp "$ZIPFILE" "s3://$ARTIFACT_BUCKET/${LAMBDA}/newsfeed-${LAMBDA}.zip"
          done

      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          TF_VAR_reddit_client_id: ${{ secrets.REDDIT_CLIENT_ID }}
          TF_VAR_reddit_client_secret: ${{ secrets.REDDIT_CLIENT_SECRET }}
